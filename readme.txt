Contents
~~~~~~~~
- Why another WSDL generator?
- How to use PhpWsdl
- The quick mode
- How to get rid of the NULL-problem
- Demonstrations
- To cache or not to cache
- Undocumented
- SOAP with JavaScript
- SOAP with Microsoft Visual Studio
- License
- Support
- Project homepage
- Versions

Why another WSDL generator?
~~~~~~~~~~~~~~~~~~~~~~~~~~~
I started to develop my own WSDL generator for PHP because the ones I saw 
had too many disadvantages for my purposes. The main problem - and the main 
reason to make my own WSDL generator - was receiving NULL in parameters 
that leads the PHP SoapServer to throw around with "Missing parameter" 
exceptions. F.e. a C# client won't send the parameter, if it's value is 
NULL. But the PHP SoapServer needs the parameter tag with 'xsi:nil="true"' to 
call a method with the correct number of parameters.

At the end the NULL-problem still exists a little bit, but I've created a 
thin, fast and ComplexType-supporting WSDL generator for my PHP webservices - 
and maybe yours?

If this isn't enough for your application, I recommend you to have a look at 
NuSOAP (sourceforge.net/projects/nusoap).

How to use PhpWsdl
~~~~~~~~~~~~~~~~~~
To use PhpWsdl you need these classes:
- class.phpwsdl.php
- class.phpwsdlcomplex.php
- class.phpwsdlelement.php
- class.pgpwsdlmethod.php
- class.phpwsdlparam.php
- class.phpwsdlparser.php
- class.phpwsdlproxy.php

You only need to include the 'class.phpwsdl.php' in your project to use 
PhpWsdl. This class will load it's depencies from the same location.

If you want to use my solution for transferring hash arrays with SOAP, you 
can also include 'class.phpwsdlhash.php' (not loaded by default). This file 
contains some type definitions and methods for working with hash arrays. Have 
a look inside for some documentation.

Call your webservice URI without any parameter to display a HTML description 
of the SOAP interface. Attach "?wsdl" to the URI to get the WSDL definition. 
Add "&readable" too, to get humen readable WSDL.

You can use my RunServer method, but you don't need to. You can use any SOAP 
server with the WSDL generated by PhpWsdl. I personally prefer using the PHP 
SoapServer.

Some classes can consume settings. Open the source code and have a look at the 
constructor to see what you can do with settings. Settings are defined with 
the @pw_set keyword in comments. An example usage for settings can be found in 
class.complextypedemo.php.

You don't have to specify the SOAP endpoint URI - PhpWsdl is able to determine 
this setting. But since I don't know your environment and your purposes, it's 
still possible to change the SOAP endpoint location.

Open the demo*.php files in your PHP source editor for some code examples.

Note: PhpWsdl can include documentation tags in WSDL. But f.e. Visual Studio 
won't use these documentations for IntelliSense. This is not a bug in PhpWsdl.

The quick mode
~~~~~~~~~~~~~~
PhpWsdl can determine most of the required configuration to run a SOAP server. 
The fastest way is:

new PhpWsdl(true);

TRUE enables the quick mode. This example requires the webservice handler 
class to be in the same file. If the class is located in another file, you can 
specify the file like this:

new PhpWsdl(true,'class.soapdemo.php');

Or, if there are multiple files to parse for WSDL definitions:

new PhpWsdl(true,Array(
	'class.soapdemo.php',
	'class.complextypedemo.php'
));

When providing more than one file, be sure the first class in the first file 
is the webservice handler class!

You even don't need to load your classes with "require_once" - let PhpWsdl do 
it for you.

Any other PhpWsdl constructor parameter will work as in normal mode - except 
for the first two parameters and the last one: In quick mode the SOAP server 
will be started, even if the last constructor parameter is FALSE.

Quick, isn't it?

How to get rid of the NULL-problem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When a SOAP client like .NET is making a SOAP request and a parameter is NULL, 
the parameters tag won't be included in the SOAP request. The PHP SoapServer 
will then throw around with "Missing parameter" exceptions or call your 
method with a wrong parameter count.

The only way I found to get rid of this problem is using a proxy class that is 
able to find missing parameters to call the target method correctly. For this 
it's important that the PHP SoapServer don't know the WSDL of your webservice.

But this solutions opens another problem: If the PHP SoapServer don't know 
your WSDL, return values won't be encoded properly. You have to encode them by 
yourself using PHPs SoapVar class. I didn't implement an encoding routine in 
the proxy yet - maybe coming soon.

To see an example how to use the proxy, please look into demo3.php.

Demonstrations
~~~~~~~~~~~~~~
This package contains some demonstrations:
- demo.php
	A basic usage demonstration
- demo2.php
	How to use PhpWsdl without PHP comment definitions of the WSDL elements
- demo3.php
	How to use the proxy to get rid of the NULL parameter problem
- demo4.php
	A quick and dirty single file usage example

Some demonstrations are using the following classes:
- class.complextypedemo.php
	How to define a complex type and array types
- class.soapdemo.php
	A simple SOAP webservice class with some test methods

All examples should produce equal and valid WSDL - except for the 
documentation in demo2.php and demo4.php. To see how to add documentation to 
the elements that are defined in demo2.php, have a look at the constructors of 
the PhpWsdl* classes.

If you want to test PhpWsdl online without installing it on your own server, 
you can try these URIs:

http://wan24.de/test/phpwsdl2/demo.php -> HTML documentation output & endpoint
http://wan24.de/test/phpwsdl2/demo.php?WSDL -> WSDL output

demo2/3/4.php are available under the same location, too. If you try the PDF 
download, you'll notice that you get other results as if you try it from your 
server. This is because I used a valid license key for the HTML2PDF API - 
PhpWsdl will then create a TOC and attach the WSDL files into the PDF, so it's 
very easy for you to provide your webservice fully documented.

To cache or not to cache
~~~~~~~~~~~~~~~~~~~~~~~~
I recommend to use the WSDL caching feature of PhpWsdl. For this you need 
a writeable folder where PhpWsdl can write WSDL files to. Using the cache is 
much faster in an productive environment. During development you may want to 
disable caching (see the demo scripts for those two lines of code). To 
completely disable the caching feature, you need to set the static CacheFolder 
property of PhpWsdl to NULL. Without a cache folder (or when using the proxy 
class) returning complex types needs attention: Use PHPs SoapVar class to 
encode them properly.

Undocumented
~~~~~~~~~~~~
Things that are not yet demonstrated are:
- Adding/Removing predefined basic types in PhpWsdl::$BasicTypes
- Hooking in PhpWsdl (see inline documentation)
- How to handle hash arrays with PhpWsdlHashArrayBuilder (see inline 
  documentation)
- How to develop extensions for an extended complex type support f.e.

SOAP with JavaScript
~~~~~~~~~~~~~~~~~~~~
For using SOAP with JavaScript I use the SOAPClient class from Matteo Casati. 
I also tested this class with these demonstrations, and I was able to receive 
complex types as JavaScript object. But sending a complex type to the 
webservice failed with some constructor-problem within the SOAPClient class. 
Currently I haven't worked on a solution for this problem because I don't use 
complex types...

SOAP with Microsoft Visual Studio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All tests using Microsoft Visual Studio 2010 ran without any problems. You can 
add your webservice as service or web reference to your project. Visual Studio 
will then generate proxy classes and other things for you. Earlier or later 
versions of Visual Studio or .NET should be compatible, too.

License
~~~~~~~
PhpWsdl is GPL (v3 or later) licensed per default. I offer a LGPL like license 
bundled with an individual SLA for your company, if required - contact me with 
email to schick_was_an at hotmail dot com for details.

PhpWsdl - Generate WSDL from PHP
Copyright (C) 2011  Andreas Zimmermann, wan24.de 

This program is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation; either version 3 of the License, or (at your option) any later 
version. 

This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. 

You should have received a copy of the GNU General Public License along with 
this program; if not, see <http://www.gnu.org/licenses/>.

See license.txt for the full GPLv3 license text.

Support
~~~~~~~
If you need help implementing PhpWsdl, I may help you with email. Contact me 
at schick_was_an at hotmail dot com. If you found an error, please report it 
at the project homepage.

Project homepage
~~~~~~~~~~~~~~~~
PhpWsdl is hosted by Google Code. The project homepage is located at

http://code.google.com/p/php-wsdl-creator/

This location should be the only source for downloads, source, Wikis and 
reported issues.

You can find my German speaking homepage here:

http://wan24.de

There you'll find some other projects and some free downloads that are maybe 
interesting for you, too.

Versions
~~~~~~~~
Note: See the diff in the respository for other changes that are not 
documented here. Only smaller changes that not seem to be very important will 
stay undocumented.

?: 2.0.1
Bugfix: @pw_omit should be @pw_omitfnc in class.phpwsdlhash.php

2011-07-31: 2.0
Info: In earlier versions multiple complex types could be defined within one 
      comment block. Now every complex type has to be defined in its own 
      comment block. If multiple complex types are defined in a single 
      comment block, only the first one will be visible! This is the only 
      change in this version that affects the main usage of PhpWsdl.

2011-07-30: 1.1
Changed: Unoptimized WSDL won't be cached anymore
Changed: PhpWsdl->CreateWsdl is now PhpWsdl->ParseFiles where is makes more 
         sense
Changed: The PhpWsdl->OutputHtmlHook can now return a true value to omit the 
         internal HTML
Changed: The PHP SoapServer is now started with SOAP_1_1 AND SOAP_1_2 per 
         default
Changed: The default namespace is now generated with the server environment 
         information
Changed: PhpWsdl trys to detect the name of the class that handles the SOAP 
         requests
Changed: PhpWsdl will use the "SCRIPT_FILENAME" if CreateWsdl is called 
         without setting up the PhpWsdl->Files property
Changed: Giving only TRUE to the PhpWsdl constructor will run the SOAP server 
         by determining all configuration
New: @pw_clear keyword to initialize the parser temporaries
New: Added demo4.php to demonstrate how to use PhpWsdl in quick mode
New: PhpWsdl has a quick mode now
New: Added test URIs on my server so you can test PhpWsdl without installing 
     it on your own server
New: Added support for the HTML2PDF http API (see www.htmltopdf.de for more 
     information) to enable licensed users to generate a PDF from the 
     documentation with the WSDL files attached (in the PDF document itself)
New: Complex types and public methods are now being sorted by their names in 
     the HTML output 
New: Now there is an index in the HTML description to jump to a definition
New: The PhpWsdl->Force(Not)OutputWsdl/Html flags can enable and disable 
     sending WSDL and/or HTML
New: The options that are given to the PHP SoapServer constructor can be 
     modified with the new PhpWsdl->SoapServerOptions array
New: The HTML output can be downloaded as PDF when clicking the "Download this 
     page as PDF" at the bottom of the document. This will only work in an 
     internet environment without authentification! (See www.htmltopdf.de for 
     more information)
New: Documentation can be parsed and included in WSDL and the HTML output
New: Setting "docs" holds the documentation for elements and will be filled by 
     the file parser
New: PhpWsdl->ParseDocs flag to enable parsing for documentation (enabled per 
     default)
New: PhpWsdl->IncludeDocs flag to enable including the documentation in WSDL, 
     if the optimizer is disabled (enabled per default)
New: Version history in readme.txt
Info: Except for the change of the PhpWsdl->OutputHtmlHook behavior this 
      version is fully compatible to version 1.0. The bugfixes are released in 
      version 1.0.1, the download has been updated
Info: There are plans for great improvements for this quick shot. The whole 
      parsing engine could maybe been done with not more than only 3 regular 
      expressions at all, f.e. The parser and the WSDL builder should support 
      plugins to extend PhpWsdl very easy and compatible to future changes. 
      All this will be a version 2.0. Until that version is released, version 
      1.* will of course be continued.

2001-07-29: 1.0.1
Bugfix: When determining the endpoint URI the http(s) selection didn't work 
        for an SSL URI
Bugfix: "is_boolean" should be "is_bool". Because of this bug the server 
        was not able to run at construction time
Bugfix: Found a typo in the HTML description: "occours" should be "occurs"
Info: This version is fully compatible to version 1.0.

2011-07-28: 1.0
The very first release version!
